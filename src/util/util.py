import json
import os
from types import SimpleNamespace


def save_json(path, index):
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(index, f)


def load_json(path):
    with open(path, encoding='utf-8') as f:
        return json.load(f)


def namespace_json(path):
    return SimpleNamespace(**load_json(path))


# Generates a dict that acts a word_index for the trainable_words.
def index_from_list(words, add_one=True):
    return {word: (i+1) if add_one else i for i, word in enumerate(words)}


# Makes directories if they do not exist.
def make_dirs(directories):
    if isinstance(directories, str):
        directories = [directories]

    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)


def load_vocab(path):
    index = load_json(path)
    return sorted(index, key=index.get)


def inputs_as_tuple(placeholders):
    """ Converts the placeholder dict generated by our pipeline to a tuple.
        Args:
            placeholders: A dict of input tensors.
        Returns:
            A tuple of input tensors.
    """
    return placeholders['context_words'], placeholders['context_chars'], placeholders['context_length'], \
    placeholders['query_words'], placeholders['query_chars'], placeholders['query_length'], \
    placeholders['answer_starts'], placeholders['answer_ends'], placeholders['answer_id']


def remove_keys(data, keys=[]):
    for _, value in data.items():
        for key in keys:
            value.pop(key, None)
    return data
